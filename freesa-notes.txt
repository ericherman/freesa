When NFS-booting:

We should patch the kernel to get rid of:

b44: eth1: BUG!  Timeout waiting for bit 80000000 of register 428 to clear.

BUILDING THE TRX IMAGE:

UTILITIES NEEDED:
lzma -- this is LZMA SDK by Igor Pavlov, not the lzma utils
  program by ville koskinen. See firmware-build-notes for build
  instructions.
trx -- from OWRT firmware-utils. needed on host.

Requires file components loader.gz, vmlinux.lzma

vmlinux.lzma:

This is the linux kernel, but compressed with lzma rather than
gzip.

Take the kernel built as vmlinux from the kernel build, then
use the cross-objcopy as:

objcopy -O binary -R .reginfo -R .note -R .comment -R .mdebug -S \
  orig-vmlinux fixed-vmlinux
objcopy -R .reginfo -R .note -R .comment -R .mdebug -S \
  orig-vmlinux fixed-vmlinux.elf

(the fixed-vmlinux.elf program is apparently useless? not sure
why we bother with it)

cat fixed-vmlinux | lzma e -si -so -eos -lc1 -lp2 -pb2 > vmlinux.lzma

loader.gz:

This is a kernel loader program, itself compressed with gzip,
that knows how to load and uncompress an LZMA-compressed kernel.
It is built using the cross-toolchain, since it needs to run on
the target.  It MAY need to be built using a uClibc toolchain.

make clean
make CC="mipsel-unknown-linux-gnu-gcc" \
  LD="mipsel-unknown-linux-gnu-ld" \
  CROSS_COMPILE="mipsel-unknown-linux-gnu-"
echo -ne "\\x00" >> loader.gz

--

trx:

this is as simple as "gcc -o trx trx.c", wahoo!

invoking trx:

trx -o OUTPUT_FILENAME.trx -f loader.gz -f vmlinux.lzma

WORKS FINE.
