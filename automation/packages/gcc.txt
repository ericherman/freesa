full-name: GNU Compiler Collection
name: gcc
version: "4.7.1"
project-url: http://gcc.gnu.org/

GCC is the GNU Compiler Collection.  The most important compiler
in the collection, for purposes of bootstrapping a system, is the
C compiler; but GCC also includes compilers for C++, Fortran,
Java, Ada, and probably other languages as well.

The job of a compiler is to translate source code in a high-level
language into assembler code.  GCC does that, but it also acts as
a driver program that invokes other programs like +as+ and +ld+
(from the binutils package) as necessary to produce libraries and
executables.  GCC as a driver program is configured by a "specs"
file that tells it what other programs to invoke and how to
invoke them.  The specs file format is documented in the GCC
documentation (which is maintained in texinfo format) in section
3.15.

Oh, I almost forgot.  The GCC package also includes the C
pre-processor (+cpp+).

Bootstrapping GCC as part of a cross-toolchain is tricky.  The
only thing that can be built without a working C library (libc)
is a plain compiler, but that compiler won't be able to produce
executable programs:  GCC can only create programs if it has
access to a support library called libgcc.  (That's because
sometimes, when GCC is compiling C code, it generates references
to functions defined in libgcc, rather than assembler code; and
GCC can't produce libgcc unless it has access to some C runtime
startup files -- object files -- the source for which is
distributed as part of the C library rather than GCC itself.)

The C libraries that are useful for our purposes -- glibc and
uClibc -- can't be built unless libgcc is available.  That's
where the trickiness comes from:  we have to produce the bare
compiler, then use it (along with +as+ from the binutils package)
to compile the C runtime files from the C library, then use those
files and the bare compiler to produce libgcc, and then use the
compiler plus libgcc to build the C library itself.  At that
point we can finally build the full GCC.

GCC can be built as part of a cross-toolchain by using the
"sysroot" framework.  To perform a sysroot build, the configure
options +--with-sysroot+ and +--with-build-sysroot+ must be
specified; and when building GCC, the environment variables
LDFLAGS_FOR_TARGET and CPPFLAGS_FOR_TARGET should be set to
+--sysroot=${SYSROOT}+.  At least, that's what Carlos O'Donell
said in a comment on GCC bug #35532.  The documentation on
sysroot builds is not particularly easy to find -- or at least,
it wasn't when this was written.  (If you know where sysroot
builds are documented, please tell us!)

A few dependencies were added to gcc in recent releases (4.3 and
higher):  the GMP, MPFR, and MPC libraries are required for all
compiler builds, and a few loop optimizations are only available
if the Parma Polyhedra Library (PPL), the isl library, and the
Chunky Loop Generator (CLooG) are available.  Those latter two
aren't hard dependencies, though; you only need those to be
available if you want to enable three specific optimizations.
(The optimizations in question, as of the last time I checked,
are loop-interchange, loop-strip-mine, and loop-block.  It's not
clear to us whether or not those optimizations are particularly
valuable, but we're certainly not worried about them for a
cross-toolchain build.)

Previous versions of PPL, probably before 0.12, included a
separate "watchdog" library called PWL, and the gcc configure
script has a check for that library.  In the 1.0 release of PPL,
PWL has been integrated into the main library so no separate
check is necessary.  The disable-pwl-check patch eliminates that
check.

Sources for the required libraries can be included in the GCC
sources in directories named gmp, mpfr, and mpc; if they are,
then they'll be built automatically along with gcc.  (We haven't
tried doing that, though.)

There's a problem when building a toolchain for Intel
architecture CPUs and uClibc 0.9.32: when the C library is
uClibc, the build of libquadmath fails.  That's a library that
was added to GCC in 4.6 and provides 128-bit floating point math
support.  For our cross-toolchain purposes, it's difficult to see
how that kind of high-precision math would be useful. We just
disable the libquadmath library altogether.

GCC's version checks for PPL and CLooG try to ensure that old
versions of those libraries are in use.  Since we want to use the
latest stable version of everything, we disable those version
checks with a patch.

patches:
 - disable-pwl-check-1

phase: static compiler

Initially we'll build a compiler with a static libgcc and no
threading support.  This will be good enough to compile libc, but
not adequate for practically anything else.

To build a static libgcc (which is the only kind that can be
built at this point, since we don't have any libc headers or
runtime startup files installed yet), the configuration options
+--without-headers+ and +--with-newlib+ can be used.  This is a
bit sloppy -- the first of those options is the only one that
should be necessary, but at the moment both are.

environment:
 CPPFLAGS_FOR_TARGET: --sysroot=PARAM[SYSROOT]
 LDFLAGS_FOR_TARGET: --sysroot=PARAM[SYSROOT]

build-dir: ../build-gcc

configure-commands:
 - PARAM[SOURCE_DIR]/configure --prefix=PARAM[TOOL_PREFIX]
     --build=PARAM[HOST] --host=PARAM[HOST] --target=PARAM[TARGET]
     --with-sysroot=PARAM[SYSROOT] --with-build-sysroot=PARAM[SYSROOT]
     --disable-decimal-float --disable-libquadmath --disable-libgomp
     --disable-libmudflap --disable-libssp --disable-multilib
     --disable-nls --disable-shared --disable-threads --enable-languages=c
     --with-newlib --without-headers --disable-ppl-version-check
     --enable-cloog-backend=isl --disable-cloog-version-check

make-commands:
 - make all-gcc all-target-libgcc

test-commands:

install-commands:
 - make install-gcc install-target-libgcc


phase: full compiler

Now that we have a C library installed, we can finally do a full
GCC build.  So we'll build both the C and C++ compilers, and
enable multi-threaded code and all of the various runtime
libraries we turned off previously.

build-dir: ../build-gcc-2

environment:
 CPPFLAGS_FOR_TARGET: --sysroot=PARAM[SYSROOT]
 LDFLAGS_FOR_TARGET: --sysroot=PARAM[SYSROOT]

configure-commands:
 - PARAM[SOURCE_DIR]/configure --prefix=PARAM[TOOL_PREFIX]
    --build=PARAM[HOST] --host=PARAM[HOST] --target=PARAM[TARGET]
    --with-sysroot=PARAM[SYSROOT] --with-build-sysroot=PARAM[SYSROOT]
    --disable-multilib --disable-nls --enable-shared --disable-libquadmath
    --enable-languages=c,c++ --enable-__cxa_atexit
    --enable-c99 --enable-long-long --enable-threads=posix
    --disable-ppl-version-check --enable-cloog-backend=isl
    --disable-cloog-version-check

make-commands:
 - make AS_FOR_TARGET="PARAM[TARGET]-as" LD_FOR_TARGET="PARAM[TARGET]-ld"

test-commands:

install-commands:
 - make install
