name: GNU libc
version: 2.7

Note that we are building our cross-glibc with a "minimum kernel
version" set to the version of the actual runtime kernel that we
will use to construct the real LFS system using the programs in
+/tools+.  It's kind of unnecessary to worry about optimizing the
glibc here that way, since it won't wind up on the final system,
but it won't hurt anything and is good practice in general.
According to the glibc documentation, the higher the kernel
version number, the less unnecessary compatibility code is built
into the C library.

configuration-defaults:
 - HOST
 - TARGET
 - KERNEL_VERSION
 - SYSROOT
 - GLIBCFLAG

patches:
 - libgcc_eh-1
 - localedef_segfault-1
 - i586-chk-1
 - fixup_for_gcc43-1

phase: headers

build-dir: ../build-glibc

configure-commands:
 - CC=gcc ../glibc*/configure --prefix=/usr \
    --host=CONFIG[HOST] --build=CONFIG[TARGET] \
    --disable-sanity-checks --enable-kernel=CONFIG[KERNEL_VERSION] \
    --with-headers=CONFIG[SYSROOT]/usr/include \
    --with-binutils=/cross-tools/CONFIG[TARGET]/bin

make_commands:
 - make cross-compiling=yes install_root=CONFIG[SYSROOT] install-headers

test-commands:

install-commands:
 - cp -v bits/stdio_lim.h CONFIG[SYSROOT]/usr/include/bits
 - touch CONFIG[SYSROOT]/usr/include/gnu/stubs.h
 - cp -v ../glibc*/nptl/sysdeps/pthread/pthread.h CONFIG[SYSROOT]/usr/include
 - cp -v ../glibc*/nptl/sysdeps/unix/sysv/linux/i386/bits/pthreadtypes.h \
    CONFIG[SYSROOT]/usr/include/bits


phase: startup files

The build commands here just build the startup files we need.
We'll build the rest of glibc after we build libgcc.

configure-commands:
 - echo "libc_cv_forced_unwind=yes" > config.cache
 - echo "libc_cv_c_cleanup=yes" >> config.cache
 - BUILD_CC="gcc" CC="CONFIG[CLFS_TARGET]-gcc" \
      AR="CONFIG[TARGET]-ar" RANLIB="CONFIG[TARGET]-ranlib" \
      CFLAGS="CONFIG[GLIBCFLAG]" \
      ../glibc*/configure --prefix=/usr \
      --host=CONFIG[TARGET] --build=CONFIG[HOST] \
      --disable-profile --enable-add-ons --with-tls \
      --enable-kernel=CONFIG[KERNEL_VERSION] --with-__thread \
      --with-binutils=/cross-tools/bin \
      --with-headers=CONFIG[SYSROOT]/usr/include \
      --cache-file=config.cache

make_commands:
 - make -r -C ../glibc*/csu objdir=$(pwd) $(pwd)/csu/crt1.o
 - make -r -C ../glibc*/csu objdir=$(pwd) $(pwd)/csu/crti.o
 - make -r -C ../glibc*/csu objdir=$(pwd) $(pwd)/csu/crtn.o

test-commands:

install-commands:
 - mkdir -p CONFIG[SYSROOT]/lib
 - cp csu/crt{1,i,n}.o CONFIG[SYSROOT]/lib


phase: full glibc

Now we have a usable GCC, complete with libgcc, and we can build
glibc at last!

configure-commands:
 - mkdir build-glibc && cd build-glibc
 - echo "libc_cv_forced_unwind=yes" > config.cache
 - echo "libc_cv_c_cleanup=yes" >> config.cache
 - BUILD_CC="gcc" CC="CONFIG[TARGET]-gcc" \
      AR="CONFIG[TARGET]-ar" RANLIB="CONFIG[TARGET]-ranlib" \
      CFLAGS="CONFIG[GLIBCFLAG]" \
      ../glibc*/configure --prefix=/usr \
      --host=CONFIG[TARGET] --build=CONFIG[HOST] \
      --disable-profile --enable-add-ons --with-tls \
      --enable-kernel=CONFIG[KERNEL_VERSION] --with-__thread \
      --with-binutils=/cross-tools/bin \
      --with-headers=CONFIG[SYSROOT]/usr/include \
      --cache-file=config.cache

make_commands:
 - make

test-commands:

install-commands:
 - make install_root=CONFIG[SYSROOT] install
