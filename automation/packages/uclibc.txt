name: uclibc
version: 0.9.30.1

uClibc is a small C library designed expressly for situations in
which glibc is too large.  That's the case when building tools
for a resource-constrained environment like the flash EPROM on
the WL-700gE.

In most cases, uClibc can be used instead of glibc without any
application code changes.


phase: headers

uClibc is configured like the Linux kernel:  a +.config+ file is
constructed using "make config" or one of the other similar
makefile targets, and then controls all parameterized aspects of
the build.

Setting up the +.config+ file is a bit messy.  We can start with
a default configuration file, but then we need to include a bunch
of other parameters based on the runtime parameters of the build.
In particular, one parameter needs to include the "fixed" header
files built by GCC, the location of which depends on what GCC
version is built and where it's installed.  There is also one
parameter for the endianness of the build system, and when
building for a target like MIPS that can use either endianness
there are two additional parameters that determine the endianness
that will be built for the target.  Here, we specify all of those
parameters regardless of whether the target supports both big and
little endianness, because it doesn't do any harm to specify
unnecessary parameters.

configure-commands:
 - make distclean || echo "never mind"
 - cp PARAM[UCLIBC_CONFIG] .config
 - echo 'KERNEL_HEADERS="PARAM[SYSROOT]/usr/include"' >> .config
 - echo 'SHARED_LIB_LOADER_PREFIX="/lib"' >> .config
 - echo 'RUNTIME_PREFIX="/"' >> .config
 - echo 'DEVEL_PREFIX="/usr"' >> .config
 - echo "ARCH_PARAM[ENDIANNESS]_ENDIAN=y" >> .config
 - echo "# ARCH_WANTS_PARAM[NOT_ENDIANNESS]_ENDIAN is not set" >> .config
 - echo "ARCH_WANTS_PARAM[ENDIANNESS]_ENDIAN=y" >> .config
 - make oldconfig

make-commands:

test-commands:

install-commands:
 - make PREFIX=PARAM[SYSROOT] install_headers


phase: startup files

At this point we can only build the C runtime startup files,
because we don't have libgcc yet.  Some of the headers may not
have been installed properly before (e.g. uClibc_config.h) so we
also do another install_headers at this point.

configure-commands:

make-commands:
 - sed -i '/UCLIBC_EXTRA_CFLAGS/d' .config
 - bash -c 'echo UCLIBC_EXTRA_CFLAGS=\"-isystem 
     $(ls -1d PARAM[TOOL_PREFIX]/lib/gcc/PARAM[TARGET]/*/include-fixed)\"' 
     >> .config
 - make PARAM[UCLIBC_CROSS_PARAM] pregen
 - install -d lib/
 - make PARAM[UCLIBC_CROSS_PARAM] lib/crt1.o
 - PARAM[TARGET]-strip -x -R .note -R .comment lib/crt1.o
 - make PARAM[UCLIBC_CROSS_PARAM] lib/crti.o
 - make PARAM[UCLIBC_CROSS_PARAM] lib/crtn.o

test-commands:

install-commands:
 - make PREFIX=PARAM[SYSROOT] install_headers
 - install -d PARAM[SYSROOT]/lib/
 - cp lib/crt?.o PARAM[SYSROOT]/lib
 - rm -rf lib


phase: full library

Now we have a usable GCC, complete with libgcc, and we can build
uClibc at last!

configure-commands:

make-commands:
 - make PARAM[UCLIBC_CROSS_PARAM]

test-commands:

install-commands:
 - make PARAM[UCLIBC_CROSS_PARAM] PREFIX=PARAM[SYSROOT] install


phase: utilities

Unlike glibc, the full uClibc build and install doesn't create a
couple of utilities (like ldd).  They are created separately.

configure-commands:

make-commands:
 - make PARAM[UCLIBC_CROSS_PARAM] utils

test-commands:

install-commands:
 - make PARAM[UCLIBC_CROSS_PARAM] PREFIX=PARAM[SYSROOT] install_utils
