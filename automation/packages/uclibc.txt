name: uClibc
version: 0.9.30.1

uClibc is a small C library designed expressly for situations in
which glibc is too large.  That's the case when building tools
for a resource-constrained environment like the flash EPROM on
the WL-700gE.

In most cases, uClibc can be used instead of glibc without any
application code changes.

EDITPOINT

configuration-defaults:

patches:

phase: headers

uClibc is configured like the Linux kernel:  a +.config+ file is
constructed using "make config" or one of the other similar
makefile targets, and then controls all parameterized aspects of
the build.

Setting up the +.config+ file is a bit messy.  We can start with
a default configuration file, but then we need to include a bunch
of other parameters based on the runtime parameters of the build.
In particular, one parameter needs to include the "fixed" header
files built by GCC, the location of which depends on what GCC
version is built and where it's installed; and three
configuration parameters need to be specified differently
depending on whether the library being built is big-endian or
little-endian, which is significant when building a toolchain for
MIPS, which can use either.

configure-commands:
 - make distclean
 - cp PARAM[UCLIBC_CONFIG] .config
 - echo 'KERNEL_HEADERS="PARAM[SYSROOT]/usr/include"' >> .config
 - echo 'SHARED_LIB_LOADER_PREFIX="/lib"' >> .config
 - echo 'RUNTIME_PREFIX="/"' >> .config
 - echo 'DEVEL_PREFIX="/usr"' >> .config
 - bash -c 'echo UCLIBC_EXTRA_CFLAGS=\"-isystem 
     $(ls -1d PARAM[TOOL_PREFIX]/lib/gcc/PARAM[TARGET]/*/include-fixed)\"' 
     >> .config
 - =(PARAM[ENDIANNESS])(big) echo "ARCH_BIG_ENDIAN=y" >> .config
 - =(PARAM[ENDIANNESS])(big) echo "ARCH_WANTS_BIG_ENDIAN=y" >> .config
 - =(PARAM[ENDIANNESS])(big) 
     echo "# ARCH_WANTS_LITTLE_ENDIAN is not set" >> .config
 - =(PARAM[ENDIANNESS])(little) echo "ARCH_LITTLE_ENDIAN=y" >> .config
 - =(PARAM[ENDIANNESS])(little) 
     echo "# ARCH_WANTS_BIG_ENDIAN is not set" >> .config
 - =(PARAM[ENDIANNESS])(little) echo "ARCH_WANTS_LITTLE_ENDIAN=y" >> .config
 - make oldconfig

make-commands:
 - make PREFIX=PARAM[SYSROOT] install_headers

test-commands:

install-commands:


phase: startup files

The build commands here just build the startup files we need.
We'll build the rest of glibc after we build libgcc.

configure-commands:

make-commands:

test-commands:

install-commands:


phase: full uclibc

Now we have a usable GCC, complete with libgcc, and we can build
uClibc at last!

configure-commands:

make-commands:

test-commands:

install-commands:
