full-name: eglibc
name: eglibc
version: "2.11"

eglibc is a kind of branch of GNU libc, primarily intended to
adapt glibc to embedded systems.  For our purposes, the only
reason to use eglibc rather than glibc is as a protest against
the glibc team -- we would prefer to use an entirely different
libc on that basis, but at the moment uClibc is the only other
real option and it seems unsuitable for a full general-purpose
GNU/Linux system.

By default, eglibc is basically compatible with glibc; option
groups can be disabled to slim down the final library and remove
facilities that are not needed in the target environment.  Most
of the text from the glibc description applies to eglibc as well.

Note that we are building our eglibc with a "minimum kernel
version" set to the version of the actual runtime kernel that we
will use to construct the final system using the programs in the
temporary tools directory.  According to the eglibc
documentation, the higher the kernel version number, the less
unnecessary compatibility code is built into the C library.  It's
kind of unnecessary to worry about optimizing the eglibc here
that way, since it won't wind up on the final system, but it
won't hurt anything and is good practice in general.

The patches correct minor problems -- the installation fails
because an expected texinfo file isn't present, and when building
the libc against a partial GCC the stack-protector option doesn't
work.

patches:
 - workaround-missing-texinfo-1
 - workaround-stack-protector-1

phase: sysroot eglibc

Eglibc always tries to link against libgcc_eh (an
exception-handling library), but the initial GCC didn't create
one -- presumably the functions that are normally in libgcc_eh
are put in some other library when creating a static libgcc.  So
before we configure eglibc, we'll make a temporary copy of
Makeconfig that doesn't have any references to libgcc_eh.

build-dir: ../build-eglibc

configure-commands:
 - cp PARAM[SOURCE_DIR]/Makeconfig PARAM[SOURCE_DIR]/Makeconfig.orig
 - sed -e 's/-lgcc_eh//g' 
    PARAM[SOURCE_DIR]/Makeconfig.orig > PARAM[SOURCE_DIR]/Makeconfig
 - echo "libc_cv_forced_unwind=yes" > config.cache
 - echo "libc_cv_c_cleanup=yes" >> config.cache
 - echo "libc_cv_gnu89_inline=yes" >> config.cache
 - BUILD_CC="gcc" CC="PARAM[TARGET]-gcc" AR="PARAM[TARGET]-ar" 
      RANLIB="PARAM[TARGET]-ranlib" CFLAGS="PARAM[GLIBCFLAG]"
      PARAM[SOURCE_DIR]/configure --prefix=/usr
      --host=PARAM[TARGET] --build=PARAM[HOST]
      --disable-profile --enable-add-ons --with-tls
      --enable-kernel=PARAM[KERNEL_VERSION] --with-__thread
      --with-binutils=PARAM[TOOL_PREFIX]/bin
      --with-headers=PARAM[SYSROOT]/usr/include
      --cache-file=config.cache

test-commands:

install-commands:
 - make install_root=PARAM[SYSROOT] install

phase: temporary tool eglibc

The eglibc built as part of the cross-toolchain builds executables
with the standard runtime linking paths -- that is, it links
programs against +/lib/ld-linux.so.2+, and that +ld-linux.so.2+
library looks for other libraries (like +libc.so.6+) in +/lib+
and +/usr/lib+.  That's the right assumption when the sysroot
directory structure is copied to the root directory of the
runtime device (which is the way sysroots are intended to be
used), but that's not the way we want to do things with our
from-source bootstrap:  we want the temporary tools to be
self-contained within the temporary tools directory, so they
don't conflict with the files we build as part of the file
system.  That means they must link against the
+lib/ld-linux.so.2+ in the temporary tools directory, and that
+ld-linux.so.2+ library must look for other libraries only in the
+lib and +usr/lib+ directories that are also in the temporary tools
directory.

The temporary tools location needs to be present with the same
absolute path on both the build system and the final runtime
system.

We can control the dynamic linker location easily by overriding
the default GCC +dynamic_linker+ spec, but we don't know how to
change the runtime library lookup path used by the dynamic linker
we've already built.

The other reason we want to build an entirely new eglibc here is
that this is the first time we're building eglibc when gcc is
available in its normal configuration, with a shared libgcc and
so on.

build-dir: ../build-eglibc-2

configure-commands:
 - mv PARAM[SOURCE_DIR]/Makeconfig.orig PARAM[SOURCE_DIR]/Makeconfig
 - echo "libc_cv_forced_unwind=yes" > config.cache
 - echo "libc_cv_c_cleanup=yes" >> config.cache
 - echo "libc_cv_gnu89_inline=yes" >> config.cache
 - BUILD_CC="gcc" CC="PARAM[TARGET]-gcc" AR="PARAM[TARGET]-ar" 
      RANLIB="PARAM[TARGET]-ranlib" CFLAGS="PARAM[GLIBCFLAG]"
      PARAM[SOURCE_DIR]/configure --prefix=PARAM[TMPTOOLS]
      --host=PARAM[TARGET] --build=PARAM[HOST]
      --disable-profile --enable-add-ons --with-tls
      --enable-kernel=PARAM[KERNEL_VERSION] --with-__thread
      --with-binutils=PARAM[TOOL_PREFIX]/bin
      --with-headers=PARAM[TMPTOOLS]/include
      --cache-file=config.cache

test-commands:

The +install_root+ is specified as +/+ for this installation
because that causes the installation to occur directly in the
prefix specified in configure, rather than a subdirectory of it.
This winds up doing what we want.

install-commands:
 - make install_root=/ install
