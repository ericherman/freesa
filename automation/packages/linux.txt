name: linux
full-name: Linux kernel
version: "2.6.36.1"
project-url: http://www.kernel.org/

The kernel is Linux _per se_ -- the core of the operating system.
Usually, when people say "Linux," they mean the entire operating
system that lets them use a computer; properly, though, Linux is
just the kernel.  (This is the basis of the Free Software
Foundation's suggestion that the operating system as a whole
should be called GNU/Linux: it's the software developed as parts
of the GNU project, combined with the Linux kernel.)

The job of the kernel is to initialize and manage all of the
hardware on the computer (including CPU, memory, and all I/O
devices) and control userspace processes.

When a computer boots Linux, it does some hardware
initialization, mounts the root filesystem, and then starts a
userspace process called +init+.  The +init+ process is
responsible for starting all other userspace programs and getting
the machine into a usable state; after the kernel starts +init+,
it gets out of the way and waits for userspace programs to
request its services.

phase: sysroot headers

The way that programs make requests of the kernel is by invoking
kernel functions known as "system calls."  The Linux kernel
sources include header files that define all of the system calls
it makes available to userspace programs.

Userspace programs don't usually invoke system calls themselves.
Instead, they invoke library functions -- such as the ones
defined in the standard C library, which on GNU/Linux systems is
typically glibc or uClibc -- that invoke system calls as needed
to accomplish their work.  (There are some cases, like the
reiserfs utilities, where userspace programs and libraries
besides the C library include the kernel headers directly.)

This step installs all of the Linux kernel header files that the
C library and certain other userspace libraries and programs
need.

The kernel source tree also includes a number of other, private,
header files -- these define data structures and functions that
are used only within the kernel itself, and are not intended to
be visible to userspace programs.  The Makefile target
"headers_install" installs only the public header files, not
these private internal headers.

The makefile target "headers_check" presumably makes sure that
the public header files are OK.  We haven't really looked at it,
though.  If you know what it really does, please tell us.

Because the install_headers target deletes the entire target
directory before it does the installation, and we will sometimes
have header files there that we want to retain (such as from the
binutils build), we install the headers to a temporary location
and copy them to the real target location from there.

configure-commands:
 - make mrproper

make-commands:
 - make PARAM[KERNEL_ARCH] headers_check

test-commands:

install-commands:
 - make PARAM[KERNEL_ARCH] INSTALL_HDR_PATH=_dest headers_install
 - install -dv PARAM[SYSROOT]/usr/include 
 - cp -rv _dest/include/* PARAM[SYSROOT]/usr/include
 - rm -rf _dest


phase: temporary tool headers

The kernel headers are needed in the temporary tools area just as
they are needed for the cross-toolchain build:  they will be used
by the libc as it is built in the tools directory.

configure-commands:
 - make mrproper

make-commands:
 - make PARAM[KERNEL_ARCH] headers_check

test-commands:

install-commands:
 - make PARAM[KERNEL_ARCH] INSTALL_HDR_PATH=_dest headers_install
 - install -dv PARAM[TMPTOOLS]/include 
 - cp -rv _dest/include/* PARAM[TMPTOOLS]/include
 - rm -rf _dest
