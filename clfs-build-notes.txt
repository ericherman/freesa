following SVN-20080228-x86 -- EXCEPT for the toolchain

!!! Use the sysroot cross-toolchain build !!!

The main difference is that the /tools directory doesn't contain
anything after doing the toolchain build -- everything is built
in the /cross-tools directory.  That's good, though -- that means
the /tools directory will contain only stuff built using the
cross-tools.

At this point we're going to FBBG, mostly.

6.4 GCC

Build a cross-compiled gmp and mpfr before you try to build GCC
4.3, because they are dependencies.  Build GMP with:

./configure --prefix=/cross-tools/gmp --build=${CLFS_HOST} \
    --host=${CLFS_TARGET} --target=${CLFS_TARGET} &&
make &&
make install

Build MPFR with:

./configure --prefix=/cross-tools/gmp --build=${CLFS_HOST} \
    --host=${CLFS_TARGET} --target=${CLFS_TARGET} \
    --with-gmp=/cross-tools/gmp &&
make &&
make install

These libraries can't be installed into /tools because, if they are, it
breaks the GCC build in the next step.  That's because some compilation
steps during the GCC build are done with the native compiler, not the
cross-compiler; those steps use the same GMP include directives as the rest
of the build, and if those include directories also include the glibc
headers like stdio.h then the native compiler picks up those versions of
the header files rather than the native glibc header files.  Hilarity
ensues.  (The actual failure shows that there is an error when including
types.h, because _MIPS_SZPTR is not defined.  That's a built-in definition
in the mips cross-compiler, but not in the native compiler, of course.)

We will install other copies of gmp and mpfr in /tools later on so that the
gcc we are building here will actually work.

Switch to GCC 4.3.0

* Install the posix and specs patches.
* Run the sed scripts to change the cpp search path and fixincludes
  process.
* Configure line should include 
  "--with-gmp=/cross-tools/gmp --with-mpfr=/cross-tools/gmp"


6.7 bzip2

I switched to bzip2 1.0.5.

6.10 findutils

I switched to findutils 4.4.0.  This required several configure overrides.

cat > config.cache <<EOF
gl_cv_func_fflush_stdin=yes
gl_cv_func_fseeko=yes
gl_cv_var_stdin_large_offset=yes
gl_cv_func_wcwidth_works=yes
EOF

And add --cache-file=config.cache to the configure line, of course.
(This is a superset of the same fix applied for gettext 0.17 later on.)

6.12 file

I switched to file 4.24.  In the middle of the build, it crashed with
"no rule to make target file"; I got it to finish by doing:

"cp src/.libs/file magic"

and then re-ran make.  That is totally dorky, I agree.

6.20 tar

I switched to tar 1.20.

6.21 texinfo

On one of these builds, the texinfo build failed because it couldn't find the
curses library.  Change the configure line:

LDFLAGS="-L/tools/lib" ./configure --prefix=/tools \
    --build=${CLFS_HOST} --host=${CLFS_TARGET}

-------------OK PAY ATTENTION---------------
Something like this text will wind up in the Freesa book.

For the FREESA build: AT THE END OF CHAPTER 6 -- when given the boot/chroot
decision -- tar up the current state as mips-clfs-A.  Then execute chapter
7 (boot).  Then tar up the current state again as mips-clfs-C.  Then
restore mips-clfs-A and execute chapter 8 (chroot).  Then tar up the
current state again as mips-clfs-B.

mips-clfs-B (chroot) is a tarball that will be extracted onto the Freesa
hard disk.  The Freesa final system build will be conducted when chrooted
into that environment.

mips-clfs-C (boot) is a tarball that will be extracted onto an NFS server.
The Freesa box will be booted with a kernel that NFS-mounts the root
filesystem from that NFS server.

Rationale:  in order to make the temporary tools system bootable, some
programs are needed in the final filesystem hierarchy.  These make it more
complicated to use package users for everything during the final system
build.  We want to use the internal hard disk for the final system builds
because compiling over NFS is slow and sometimes issues spurious errors
because the NFS server clock may not be perfectly synchronized with the
Freesa clock.

The other things we will need for the build are: a properly patched kernel
(the stock Linus kernel does not work on the Freesa device); image
utilities that can package the kernel into a TRX image that can be flashed
into the Freesa; and adequate kernel modules on the mips-clfs-C system for
the device to access the hard disk.
-------------PROCEED------------------------



7.5 e2fsprogs

I bumped it to 1.40.9.

7.6 sysvinit

sulogin couldn't be built because it can't find "crypt".  It isn't really
necessary, though, so just ditch it.  The easiest way to do that
is modify the "sed" script to:

sed -e 's@root@0@g' \
    -e "s@/dev/initctl@${CLFS}&@g" \
    -e 's@\(mknod \)-m \([0-9]* \)\(.* \)p@\1\3p; chmod \2\3@g' \
    -e "s@/usr/lib@/tools/lib@" \
    -e 's@sulogin @@' \
    src/Makefile.orig > src/Makefile


Uncomment the "if your system has a console port" agetty line
from the standard clfs inittab, and comment out the section that
says "comment this out if your system only has a serial console."
Duh.

7.8 util-linux-ng

Change configuration line so the libraries we built stuff under /tools will
be found:

CFLAGS='-I/tools/include' LDFLAGS='-L/tools/lib' ./configure \
    --build=${CLFS_HOST} \
    --host=${CLFS_TARGET} --enable-login-utils \
    --disable-makeinstall-chown

7.9 udev

Upgrade to 120.

7.11 linux kernel

We need the OpenWRT kernel patches.  It sure would be great if we knew 
which ones are actually necessary.  Alas!  We don't, yet.

The basic kernel version we're using is 2.6.23.16.  Added to this are lots
of changes from the OpenWRT project, located in the target/linux directory:

- All of the files from generic-2.6/files are copied in
- All of the files from brcm47xx/files are copied in
- All of the patches from generic-2.6/patches-2.6.23 are applied in order
- All of the patches from brcm47xx/patches-2.6.23 are applied in order

If you do not want to do all that, you can clone git://www.rnd.cx/linux 
and checkout the openwrt-r11011 tag.  And then apply the gcc430-fix patch,
because otherwise it won't compile.

A base kernel configuration you can use is in the kernel directory.

Change the default boot command line so it has the IP address and path of
the NFS server you will be using for the initial boot of the Freesa box.

After building the kernel, make it bootable with:

${CLFS_TARGET}-objcopy -O binary -R .reginfo -R .note -R .comment \
    -R .mdebug -S vmlinux vmlinux-fixed

TODO: we will eventually need to convert this into a trx image, so it can
be flashed onto the Freesa box.  That will require us to build the OpenWRT
trx-building programs, and also reverse-engineer the part of the OpenWRT
build that generates a trx that contains an LZMA-compressed kernel.
Initially, to make sure the kernel boots, we can use tftp.

SAVE THE KERNEL SOURCE TREE.  Do not touch it.  Any additional modules,
like the "diag" module that spins the hard disk, will need to be compiled
against that kernel tree (with the same compiler).

As far as that goes, we can go ahead and build diag now.  Go to
the diag directory and:

make ARCH=mips CROSS_COMPILE=${CLFS_TARGET}- KERNELDIR=${CLFS}/Build/linux
mkdir ${CLFS}/lib/modules/2.6.23.16nb1/kernel/misc
cp *.ko ${CLFS}/lib/modules/2.6.23.16nb1/kernel/misc



7.12 colo

Skip colo.  It is irrelevant to Freesa.  We boot using CFE.

7.14 /etc/fstab

We will not initially have a swap partition.  Don't create a swap entry in
/etc/fstab.

The root filesystem will be NFS-mounted.  The appropriate entry in
/etc/fstab will be something like:

192.168.236.5:/home/clfs / nfs defaults 0 0

As long as we are creating config files, create an
/etc/inetd.conf with:

----
telnet stream tcp nowait root /usr/sbin/telnetd telnetd
----

And create an /etc/services with:

----
telnet           23/tcp    # Telnet
telnet           23/udp    # Telnet
----

TODO add a boot script that starts inetd and possibly configures
more network stuff so it works properly.

7.17 changing ownership
 
Before chowning anything, we need to build a couple more things.

The point of the NFS-root-mounted filesystem is to allow us to access the hard
disk, build a partition table, create filesystems and swap, mount the
filesystems, unpack the stage B tarball onto them, and then chroot into the
local disk environment and complete the build from there.

That means, in addition to the stuff we have created so far, we need a telnet
server (so once the system is booted we can get a prompt on it without
requiring a serial console).

So.  Inetutils (version 1.5):

./configure --prefix=$CLFS/usr --libexecdir=$CLFS/usr/sbin \
    --sysconfdir=$CLFS/etc --localstatedir=$CLFS/var \
    --disable-logger --disable-syslogd \
    --disable-whois --disable-talkd \
    --disable-talk \
    --build=${CLFS_HOST} --host=${CLFS_TARGET} &&
make &&
make install

Lzma: 

Use version 4.32.5.  Build with:

./configure \
    --prefix=/tools --build=${CLFS_HOST} --host=${CLFS_TARGET} &&
make && make install

vim:

Cross-compiling vim is a PITA.  We will have to build it in the
booted system instead.  At least it will be a good test of the
native tools in the freesa environment.


7.18 making the temporary system bootable

This section is irrelevant to us.  But it is a convenient location to
bundle up the current CLFS directory as mips-clfs-C.  Do that.  Then
restore the mips-clfs-A tarfile and do chapter 8 (chroot) to construct the
root filesystem that we will install to the internal hard disk of the
Freesa box.

NOW WE ARE IN THE mips-clfs-A DIRECTORY AGAIN.  GO TO CHAPTER 8.

8.3 util-linux-ng

Change configuration line so the libraries we built in /tools will be
found:

CFLAGS='-I/tools/include' LDFLAGS='-L/tools/lib' \
   ./configure --prefix=/tools \
    --build=${CLFS_HOST} --host=${CLFS_TARGET}

8.4 mounting filesystems (and on from there)

Bail out at this point.  Tar up the current CLFS state as mips-clfs-C.

9.1 

Prior to doing tool builds (tcl etc), build lzma so
lzma-compressed packages can be uncompressed.  This is a normal:

./configure --prefix=/tools && make && make install

Also build shadow (so that we have adduser and addgroup and su for the
package owners stuff):

Apply the same patch as in section 10.46, and build with:

./configure --prefix=/tools --sysconfdir=/etc --without-selinux \
   --without-libpam --disable-nls --without-audit  &&
make && make install

also change the "chroot" command so that it adds /tools/sbin to
the PATH in the chrooted environment; or set it up that way in
/root/.bashrc or whatever.

and vim (so we can edit options files):

./configure --prefix=/tools && make && make install


10.3 set CFLAGS and CXXFLAGS:

export CFLAGS="-march=prescott -O3 -pipe -fomit-frame-pointer"
export CXXFLAGS="${CFLAGS}"

Override these in the "options" file for each package user if
necessary.

10.5 

*******
PRIOR TO INSTALLING LINUX KERNEL HEADERS
*******
install the package users stuff!

See "README" in the package-users tarball for instructions.

AFTER INSTALLING LINUX KERNEL HEADERS

Move /usr/include/scsi to /usr/include/linux/scsi (or just rename
them?) -- glibc needs to install files with the same names to
/usr/include/scsi.

10.6

man-pages

If you want the posix man pages, pre-create 
/usr/share/man/{man0p,man1p,man3p} and make them install dirs.


10.7

glibc

The CLFS book suggests setting CFLAGS in the configure command
line to something like "-march=i686 -mtune=generic -g -O2"; that
is probably a good idea.  I always add -pipe and
-fomit-frame-pointer and have never had problems as a result.

After installing glibc, you can allow all package users to re-run
ldconfig by setting a special user "ldconfig" in the install
group, and making /sbin/ldconfig owned by ldconfig, in the
install group, with mode 6750.  (Or you can leave the owner as
glibc, if you don't mind ldconfig running with glibc's
privileges.)

Many other packages will need to write to /usr/info/dir, which is
onwed by glibc.  Put it in the install group and chmod 664 it.

10.9

Binutils build fails in gas/read.c in "equals".  Fixed with an
additional patch (fix-werror-1).

10.10

GCC installation will require the removal of a bunch of symlinks
in /usr/lib owned by root pointing into the /tools directory,
e.g. libgcc_s.so, libgcc_s.so.1, libstdc++.* -- chown these to 
gcc before doing the build/test/install cycle.

10.12

There may be three ext2 filesystem check symlinks into /tools
from /sbin -- delete them before installing the e2fsprogs
package.

10.13

For coreutils, I skipped running the tests altogether.

There are symlinks that need to be removed or chowned before 
the coreutils user can install its (correct) 
versions: /bin/{cat,pwd,rm,stty}

10.19

Before installing libtool, be sure to re-run set_install_dirs so
that the /usr/share/aclocal directory created by bison becomes an
install directory; otherwise libtool won't be able to do its
install.

10.22

There's a perl symlink to tools at /usr/bin/perl, get rid of
it first.

Also create the minimal /etc/hosts, and turn on the loopback
interface and set the hostname, as described in this section.

For the FreeSA build, the configure for perl again drops into a
shell a couple of times, which needs to be exited and then the 
suggested option selected.  I don't know how to avoid this, other
than to modify the configure.gnu script.

10.27

There is a bash symlink in /bin; you can't get rid of it, because
it's needed while the bash build proceeds.  So instead, chown the
symlink to the bash user with "chown -h bash:bash /bin/bash". The
-h means to chown the symlink rather than the file pointed to by
the symlink.

10.34

Grep is just like bash.  chown /bin/grep to grep so the install
will work.  It would probably be safe just to remove the symlink,
but why bother?

10.46

shadow -- the install may fail if it's unable to install some
foreign-language man pages.  What I do is make /usr/share/man an
install dir and then delete the foreign language man pages later
on.

remove the SUID bit from su; otherwise it will stop working. Also
make other programs (/bin/passwd,
/usr/bin/{chage,chfn,chsh,expiry,gpasswd,newgrp} SUID root, or
remove the SUID bit from them.  At least /bin/passwd should be
SUID root so that people can change their passwords.

10.47

The Makefile wants to run the real install program
(/usr/bin/install) instead of the more-control helper script.
This patch fixes things:

diff -r -N -u sysklogd-1.5-orig/Makefile sysklogd-1.5/Makefile
--- sysklogd-1.5-orig/Makefile  2007-05-30 10:28:48.000000000 -0500
+++ sysklogd-1.5/Makefile       2007-12-22 22:27:22.000000000 -0600
@@ -27,7 +27,7 @@
 LDFLAGS= -s
 
 # Look where your install program is.
-INSTALL = /usr/bin/install
+INSTALL = install
 
 # Destination paths, set prefix=/opt if required
 BINDIR = /usr/sbin

-----------cut here----------


