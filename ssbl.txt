After building a uclibc-based native toolchain on the freesa box,
we have to use that toolchain to build all of the stuff that will
wind up in flash (except for the kernel image and kernel modules,
which are built using the normal toolchain).

-- NOTE IMPORTANT CHANGE IN PLANS --

Because it seems to be surprisingly difficult to set up a flash
image that has a kernel and separate squashfs image, we are going
to try using initramfs, as described in
Documentation/early_userspace/README (in the kernel source).
OpenWRT already contains a patch that causes the initramfs
archive to be compressed with LZMA rather than gzip.

The way that initramfs works is: a CPIO-format archive is
attached to the kernel.  At boot time, rather than mounting a
root filesystem normally, the kernel notices that it has an
initramfs archive attached to it; it decompresses the archive and
extracts its contents into a ramfs.  Then it runs the program
/init (which it expects to have been created during the archive
extraction).

There are a couple of benefits of this approach.

First:  the kernel doesn't have to find a separate filesystem
partition on the flash chip; when the kernel is loaded from flash
(or TFTP), the initramfs archive is loaded as part of it.

Second:  we don't have to be root for any part of the kernel
image build, because we can tell the kernel to add node entries
for /dev/null and /dev/console to the initramfs archive.

Third:  we don't need to build squashfs-lzma at all, and the
kernel doesn't need squashfs support to be built in at all.

Fourth:  we may be able to test the full boot using TFTP, rather
than needing to flash a TRX image onto the box to test the boot.

(I guess there are several benefits, rather than a couple.)

The other consequence of this approach is that we won't have a
separate "ssbl" user at all -- instead, the stuff that will live
in the ssbl will be built as the kernel user, along with the
kernel per se.  The kernel build process becomes:

* Unpack the kernel sources
* Compile busybox
* Install busybox, uclibc runtime files, and everything else we
  need into the initramfs source directory
* Build the kernel itself (which will construct the initramfs
  archive automatically).

1. Prepare the ssbl directory

This contains the same stuff that the squashfs was going to
contain, except that it does not contain device nodes.

- build busybox
- install busybox to a "ssbl" directory (the contents of which
  will become the root directory of the initramfs)
- ensure that the init program is at exactly "ssbl/init"
- create a file "ssbl-nodes.txt" with directives to create the
  /dev/console and /dev/null nodes
- configure the kernel, giving it CONFIG_INITRAMFS_SOURCE
  including both "ssbl" and "ssbl-nodes.txt". (Don't know what
  the base directory for these source locations is. Maybe give it
  absolute paths.)
  - also configure INITRAMFS_ROOT_UID and INITRAMFS_ROOT_GID to
    be the kernel user UID and GID, so that the stuff in the
    initramfs is owned by root:root
- build the "diag.ko" module and other modules needed to boot the
  system, if any (see =MODULES= below)
- build the LZMA SDK so that the kernel can lzma-compress the
  CPIO image (the same thing will be used to compress the kernel
  image itself)
- build the kernel

ssbl-nodes.txt should contain:
----
dir /dev 0755 0 0
nod /dev/console 600 0 0 c 5 1
nod /dev/null 666 0 0 c 1 3
----

After building the kernel and lzma-compressing it, ensure that it
is 1728kb or less in size.  (Actually it needs to be a little
less than 1728kb, since lzma-loader must also fit.)  If so,
package it as a trx:

1) lzma the kernel

2) build lzma-loader

3) build trx

4) create the trx file:

    trx -o woohoo.trx -f loader.gz -f vmlinux.lzma

5) flash that sucker.

=MODULES=

To build modules before the kernel image is built:

prepare the kernel source with:

(the ARCH and CROSS_COMPILE are only needed if cross-compiling of
course)

make ARCH=mips CROSS_COMPILE=mipsel-unknown-linux-uclibc- oldconfig
make ARCH=mips CROSS_COMPILE=mipsel-unknown-linux-uclibc- prepare scripts
make ARCH=mips CROSS_COMPILE=mipsel-unknown-linux-uclibc- modules

Then, for external modules, go to the module directory and:

make ARCH=mips CROSS_COMPILE=mipsel-unknown-linux-uclibc- KERNELDIR=/tmp/linux

This produces all of the kernel modules!  Copy only the important
ones to ssbl.

Finish reparing ssbl, then:

make ARCH=mips CROSS_COMPILE=mipsel-unknown-linux-uclibc-


---- the stuff below this line relates to the original ssbl work ----
--------------- we hope that it is mostly obsolete ------------------

Create a user who will do all of the flash image construction. I
called it ssbl for "Second Stage Boot Loader."  This can be a
package user if you'd like, or a normal user.  In this file I'm
assuming the user is called "ssbl".

Start by copying /opt/uclibc/sysroot to the ssbl home directory.

Now configure busybox -- we need to build everything we need in
the ssbl image, but absolutely nothing else, because (I can't
reiterate this enough) we only have 1728kb for the kernel image
plus root filesystem.

Use busybox busybox-1.13.1.

Set PATH to include /opt/uclibc/bin as its first element.

busybox can be configured with "make menuconfig" -- it is just
like the linux kernel and uclibc.

I turned off everything I could turn off, including even such
things as terse applet usage messages

Eric used: ssbl/config-busybox-eric-05

As a first pass at testing a SSBL, we build a kernel with an NFS
root that contains the filesystem that we imagine we will
compress into flash. Eric had success using:
 kernel-config-2.6.23.16-nb6eric

The script for making the SSBL filesystem is "make_ssbl", but you
will need to adjust the variables at the top to match paths for
your system. The script makes the essential dirs and creates
symlinks for the busybox applets.  Pay attention to the output
from the script:  it will remind you to create the nodes
/dev/null and /dev/console.  The script makes some assumptions
about the hard disk layout; make sure that those assumptions are
correct.

1) change the /sbin/init to have the correct /dev/hdeX

2) /sbin/chroot is the host system and it needs to be that
way on the hard disk as well. This is not where it was by
default on my system. I moved it. You may wish to symlink.
  man 8 pivot_root

3) mkdir /old_root on the hard disk filesystem.


Next, once we have tftp booted that kernel with the NFS root
to the minimal ssbl-simulated filesystem, demonstrated the
pivot-root, and seen ntp & sshd start successfully so that we are
able to ssh in, rebuild the kernel without NFS.  This will be the
kernel we boot from the flash device.
 kernel-config-2.6.23.16-fb1eric

Remember to rebuild "diag.ko".

Now that we have a ssbl, we need to package it up.

The instructions are in BUILDING THE TRX IMAGE of the
freesa-notes.txt in detail.

1) lzma the kernel

2) build lzma-loader

3) build squashfs with lzma

   squashfs 3.4:
   ftp://ftp.slax.org/source/slax/sqlzma/squashfs3.4.tar.gz

   SquashFS-LZMA 3.4-457:
   ftp://ftp.slax.org/source/slax/sqlzma/sqlzma3.4-457.tar.bz2

   squashfs3.4/squashfs-tools/mksquashfs /opt/ssbl ssbl.squashfs -all-root

4) make the "fs_mark" file

5) build trx

./trx -o freesa-suicide0.trx \
   -f lzma-loader/loader.gz \
   -f /usr/src/kernel/linux/vmlinux.lzma \
   -a 1024 \
   -f ssbl.squashfs \
   -a 0x10000 \
   -A fs_mark

mjn3's trx replacement - v0.81.1
bob:~/openwrt$ ls -ltr freesa-suicide0.trx 
-rw-rw-r-- 1 bob bob 1380352 2009-02-03 12:00 freesa-suicide0.trx
bob:~/openwrt$ 

But this didn't work from CFE. Eric thinks he may have a problem
with his SquashFS-LZMA.

